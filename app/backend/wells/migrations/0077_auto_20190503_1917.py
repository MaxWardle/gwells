# Generated by Django 2.1.8 on 2019-05-03 19:17

import logging

from django.db import migrations

logger = logging.getLogger(__name__)

# NOTE: this migration only needs to run once.


def copy_perforations_for_submissions(apps, schema_editor):
    """ copies perforations onto legacy activity submissions (if there is a legacy submission record
    for a well that has a perforation). This ensures perforation records are captured in the original
    submission record, so they don't disappear if the well is recreated from submissions.
    """
    LinerPerforation = apps.get_model('wells', 'LinerPerforation')
    Perforation = apps.get_model('wells', 'Perforation')

    number_perforations_copied = 0

    for perf in Perforation \
            .objects \
            .filter(
                liner_perforation_from__isnull=False,
                liner_perforation_to__isnull=False,
                well_tag_number__isnull=False,
                well_tag_number__activitysubmission__isnull=False,
                well_tag_number__activitysubmission__well_activity_type='LEGACY'
            ):
        filing_no = perf.well_tag_number.activitysubmission_set.get(well_activity_type='LEGACY')
        new_perf_for_submission = LinerPerforation(
            create_user=perf.create_user,
            create_date=perf.create_date,
            update_user=perf.update_user,
            update_date=perf.update_date,
            start=perf.liner_perforation_from,
            end=perf.liner_perforation_to,
            activity_submission=filing_no
        )

        if not LinerPerforation.objects.filter(
                activity_submission=filing_no,
                start=perf.liner_perforation_from,
                end=perf.liner_perforation_to).exists():
            new_perf_for_submission.save()
            number_perforations_copied += 1

    logger.info(
        '{} perforations copied from perforation to liner_perforation'.format(number_perforations_copied)
    )


def copy_perforations_for_wells(apps, schema_editor):
    """ copies perforations that were missed during data replication onto a well record
        these records were replicated into the wrong table.
    """
    LinerPerforation = apps.get_model('wells', 'LinerPerforation')
    Perforation = apps.get_model('wells', 'Perforation')

    number_perforations_copied = 0

    for perf in Perforation.objects.filter(
            liner_perforation_from__isnull=False, liner_perforation_to__isnull=False):
        new_perf_for_well = LinerPerforation(
            create_user=perf.create_user,
            create_date=perf.create_date,
            update_user=perf.update_user,
            update_date=perf.update_date,
            start=perf.liner_perforation_from,
            end=perf.liner_perforation_to,
            well=perf.well_tag_number
        )

        if not LinerPerforation.objects.filter(
                well=perf.well_tag_number,
                start=perf.liner_perforation_from,
                end=perf.liner_perforation_to).exists():
            new_perf_for_well.save()
            number_perforations_copied += 1

    logger.info(
        '{} perforations copied from perforation to liner_perforation'.format(number_perforations_copied)
    )


def copy_perforations_for_submissions_down(apps, schema_editor):
    pass


def copy_perforations_for_wells_down(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('wells', '0076_merge_20190502_2358'),
    ]

    operations = [
        migrations.RunPython(copy_perforations_for_wells, copy_perforations_for_wells_down),
        migrations.RunPython(copy_perforations_for_submissions, copy_perforations_for_submissions_down)
    ]
